func allocMemPage(dd pge){
    dd page = pge * 4096;
    asm(mov32 eax 192);
    asm(mov32 ebx 0);
    asm(mov32 ecx page);
    asm(mov32 edx 3);
    asm(mov32 esi 34);
    asm(mov32 edi -1);
    asm(push ebp);
    asm(mov32 ebp 0);
    asm(syscall);

    asm(pop ebp);
    return;
}

func freeMemPage(dd addr, dd pge_number) {
    dd page = pge_number * 4096;
    asm(mov32 eax 91); 
    asm(mov32 ebx addr);
    asm(mov32 ecx page);
    asm(push ebp);
    asm(mov32 ebp 0);
    asm(syscall);
    
    asm(pop ebp);
    return 0;
}

//nanoseconds is from 0 to 999999999
func sleep(dd seconds, dd nanoseconds){
    asm(mov32 eax nanoseconds);
    asm(push eax);

    asm(mov32 eax seconds);
    asm(push eax);

    asm(mov32 ebx esp);
    asm(mov32 ecx 0);

    asm(mov32 eax 162);
    asm(syscall);

    asm(addi esp 8);

    return 0;
}

func createString(){
    asm(pusha);
    dd page1 = allocMemPage(1);
    asm(popa);
    return page1;
}

func setLetter(dd addr, dd offset, db letter){

    asm(mov32 ecx addr);
    asm(mov8 bl letter);
    asm(mov32 eax offset);
    asm(mov8_mr_r ecx eax bl);

    return 0;
}
func getLetter(dd addr, dd offset){
    db letter = 0;
    asm(mov32 ecx addr);
    asm(mov32 eax offset);
    asm(mov8_r_mr bl ecx eax);
    asm(mov8 letter bl);
    return letter;
}


func getStringLen(dd addr){
    dd len = 0;

    while 1 = 1{

        db letter = 0;

        asm(mov32 ebx 0);
        asm(mov32 ecx addr);
        asm(mov32 eax len);
        asm(mov8_r_mr bl ecx eax);
        asm(mov8 letter bl);

        if letter = 0 {
            return len;
        }
        len = len + 1;
    }

    return len;
}

func newline(dd addr){
    dd nl = CString("\n");

    asm(mov32 ecx nl);
    asm(mov32 ebx 1);
    asm(mov32 edx 1);
    asm(mov32 eax 4);
    asm(syscall);
    return 0;
}

func printString(dd addr){

    dd len = getStringLen(addr);

    asm(mov32 ecx addr);
    asm(mov32 ebx 1);
    asm(mov32 edx len);
    asm(mov32 eax 4);
    asm(syscall);
    return 0;
}

func printLine(dd addr){
    printString(addr);
    newline(addr);
    return 0;
}

func printChar(db letter){
    dd buffer = allocMemPage(1);
    setLetter(buffer, 0, letter);
    asm(mov32 ecx buffer);
    asm(mov32 ebx 1);
    asm(mov32 edx 1);
    asm(mov32 eax 4);
    asm(syscall);

    freeMemPage(buffer, 1);
    return 0;
}

func printStringLen(dd addr, dd len){

    asm(mov32 ecx addr);
    asm(mov32 ebx 1);
    asm(mov32 edx len);
    asm(mov32 eax 4);
    asm(syscall);
    return 0;
}

func convertStringToNumber(dd addr){
    db minus = getLetter(addr, 0);
    dd possible_minus = 1;
    if minus = '-' {
        possible_minus = -1;
        addr = addr + 1;
    }
    //get each char and convert to number, sum it to result
    dd result = 0;

    for dd i = 0; i < getStringLen(addr) - 1; i++;{
        db letter = getLetter(addr, i);
        if letter < 48 | letter > 57 {
            return -1;
        }
        letter = letter - 48;
        result = result * 10;
        result = result + letter;
    }

    return result * possible_minus;
}

func convertNumberToString(dd number, dd addr){
    if number < 0 {
        setLetter(addr, 0, '-');
        number = number * -1;
        addr = addr + 1;
    } elif number = 0 {
        setLetter(addr, 0, '0');
        setLetter(addr, 1, 0);
        return 0;
    }
    // convert number to string in reverse order first
    dd i = 0;
    while number > 0 {
        dd temp = number / 10;
        dd mult = temp * 10;
        db letter = number - mult;
        number = temp;
        letter = letter + 48;
        setLetter(addr, i, letter);
        i = i + 1;
    }
    setLetter(addr, i, 0);

    // reverse the string in place
    dd start = 0;
    dd end = i - 1; // skip the null terminator
    while start < end {
        db tmp1 = getLetter(addr, start);
        db tmp2 = getLetter(addr, end);
        setLetter(addr, start, tmp2);
        setLetter(addr, end, tmp1);
        start = start + 1;
        end = end - 1;
    }
    return 0;
}

func printNumber(dd number){
    dd addr = allocMemPage(1);
    convertNumberToString(number, addr);
    printLine(addr);
    freeMemPage(addr, 1);
    return 0;
}


func getInputString(dd addr, dd len){

    asm(mov32 ecx addr);
    asm(mov32 ebx 0);
    asm(mov32 edx len);
    asm(mov32 eax 3);
    asm(syscall);
    return 0;
}


func getDDInput(){
    dd input = allocMemPage(1);
    getInputString(input, 12); //11 max int length 10 + end string 0 + possible - sign
    return convertStringToNumber(input);
}

func strcmp(dd addr1, dd addr2){
    dd strlen1 = getStringLen(addr1);
    dd strlen2 = getStringLen(addr2);

    dd i = 0;
    while i < strlen1 | i < strlen2 {
        db letter1 = getLetter(addr1, i);
        db letter2 = getLetter(addr2, i);
        if letter1 ! letter2 {
            return 0;
        }
        i = i + 1;
    }

    return 1;
}


func setstr(dd addr1, dd len, dd code){
    for dd i = 0; i < len; i++;{
        setLetter(addr1, i, code);
    }
    return 0;
}

func printASCII_AsNumber(dd char){
    dd addr = allocMemPage(1);
    convertNumberToString(char, addr);
    printString(addr);
    return 0;
}

func printHex(dd number){
    dd addr = allocMemPage(1);
    setstr(addr, 10, 0);
    dd i = 0;
    while number > 0 {
        dd temp = number / 16;
        dd mult = temp * 16;
        dd letter = number - mult;
        number = temp;
        if letter < 10 {
            letter = letter + 48;
        } else {
            letter = letter + 55;
        }
        setLetter(addr, i, letter);
        i = i + 1;
    }
    setLetter(addr, i, 0);

    // reverse the string in place
    dd start = 0;
    dd end = i - 1; // skip the null terminator
    while start < end {
        db tmp1 = getLetter(addr, start);
        db tmp2 = getLetter(addr, end);
        setLetter(addr, start, tmp2);
        setLetter(addr, end, tmp1);
        start = start + 1;
        end = end - 1;
    }
    printString(addr);
    freeMemPage(addr, 1);
    return 0;
}

//tenho de ver uma meneira de dar free nisto
func concat(dd addr1, dd addr2){
    dd len1 = getStringLen(addr1);
    dd len2 = getStringLen(addr2);

    dd newPageAlloc = len1 + len2 + 1;
    newPageAlloc = newPageAlloc / 4096 + 1;
    dd addr = allocMemPage(newPageAlloc);

    for dd i = 0; i < len1; i++;{
        setLetter(addr, i, getLetter(addr1, i));
    }
    for dd j = 0; j < len2; j++;{
        setLetter(addr, len1 + j, getLetter(addr2, j));
    }
    return addr;
}

func printAllBytesAsHex(dd addr, dd len){
    dd space = CString(" ");
 
    for dd i = 0; i < len; i++;{
        printHex(i);
        printString(space);
        printHex(getLetter(addr, i));
        newline();
    }
    return 0;
}

func printHexByLength(dd addr, dd len){
    dd space = CString(" ");
 
    for dd i = 0; i < len; i++;{
        printHex(getLetter(addr, i));
        printString(space);
    }
    newline();
    return 0;
}

func countNumberOfBytes(dd addr, dd len, db byte){
    dd count = 0;
    for dd i = 0; i < len; i++;{
        db letter = getLetter(addr, i);
        if letter = byte {
            count = count + 1;
        }
    }
    return count;
}

func GetUntilByte(dd addr, dd len, db byte){
    dd count = 0;
    for dd i = 0; i < len; i++;{
        db letter = getLetter(addr, i);
        if letter = byte {
            i = len;
        }
        count = count + 1;
    }
    return count;
}

func GetUntilByteAndCopy(dd addr, dd len, db byte){
    dd count = GetUntilByte(addr, len, byte);

    dd newPageAlloc = count + 1;
    newPageAlloc = newPageAlloc / 4096 + 1;
    dd addr2 = allocMemPage(newPageAlloc);

    for dd j = 0; j < count; j++;{
        setLetter(addr2, j, getLetter(addr, j));
    }
    setLetter(addr2, count, 0);
    return addr2;
}

func GetNumberOfLines(dd addr){
    dd len = getStringLen(addr);
    dd count = 0;
    for dd i = 0; i < len; i++;{
        db letter = getLetter(addr, i);
        if letter = 10 {
            count = count + 1;
        }
    }
    return count;
}


