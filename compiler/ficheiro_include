func test(){
    return 10;
}


func test_whiles(){
    dd a = 0;
    while a < 10 {
        a = a + 1;
    }
    return a;
}


func test_deaddressing(){
    dd a = 10;
    dd*b = &a;
    dd*c = &b;
    dd*d = &c;
    return ***d;
}

func test_ifs(){
    dd a = 0;
    if a = 0 {
        a = 10;
    }
    return a + 1 - 1;
}

func test_fors(){
    dd a = 0;
    for dd i = 0; i < 10; i++;{
        a = a + 1;
    }
    return a;
}

func testRecursion(db a){
    if a < 10 {
        a = a + 1;
        return testRecursion(a);
    }
    return a;
}

func test_params(db a, db b, db c, dw d, db e){
    return a + b + c + d + e;
}

func nestedForLoops(){
    dd a = 0;
    for dd i = 0; i < 10; i++;{
        for dd j = 0; j < 10; j++;{
            a = a + 1;
        }
    }
    return a;
}

func nestedIfs(){
    dd a = 0;
    dd b = 20;
    
    if a < 10 {
        if b > 10 {
            a = 10;
        }
    }
    return 10;
}

func ret10if10(db a){
    if a = 10 {
        return 10;
    }
    return 0;
}


//thx ai for the testes
func forlooptest(){
    dd a = 0;
    for dd i = 0; i < 10; i++;{
        a = a + i;
    }
    return a;
}

func forlooptest2(){
    dd a = 0;
    for dd i = 0; i < 10; i++;{
        if i = 0 {
            return 10;
        }
    }
    return a;
}

func test_gates(){
    dd a = 0;
    dd b = 5;
    
    // if statement with AND gate
    if a < 10 & b > 0 {
        a = a + 1;
    }
    
    // while loop with OR gate
    while a < 10 & b < 15 {
        a = a + 1;
        b = b + 1;
    }
    
    for dd j = 0; j < 10 && a < 100; j++;{
            a = a + 1;
    }

    if a < 10 | 0 = 0 {
        a = a + 1;
    }
 
    return a + b;
}

func test_and_only(){
    dd a = 5;
    dd b = 7;
    dd c = 0;
    if a < 10 & b > 0 {
         c = 1;
    }
    return c;
}

func test_and_false(){
    dd a = 15;
    dd b = 7;
    dd c = 0;
    if a < 10 & b > 0 {
         c = 1;
    }
    return c;
}

func test_or_only(){
    dd a = 5;
    dd b = -3;
    dd c = 0;
    if a > 10 | b > 0 {
         c = 1;
    }
    return c;
}

func test_or_true(){
    dd a = 5;
    dd b = 2;
    dd c = 0;
    if a > 10 | b > 0 {
         c = 1;
    }
    return c;
}

func test_while_gate(){
    dd a = 0;
    dd count = 0;
    while a < 5 & count < 3 {
         a = a + 1;
         count = count + 1;
    }
    return a + count;
}

func test_precedence(){
    dd a = 5;
    dd b = 10;
    dd c = 0;
    if a < 10 & b = 10 | a = 5 {
         c = 1;
    }
    return c;
}

func test_nested_gates(){
    dd a = 5;
    dd b = 8;
    dd c = 12;
    dd result = 0;
    if a < b & b < c & a < c {
         result = 1;
    }
    return result;
}

func test_nested_gates_fail(){
    dd a = 10;
    dd b = 8;
    dd c = 12;
    dd result = 0;
    if a < b & b < c & a < c {
         result = 1;
    }
    return result;
}

func forloop_gate_test(){
    dd a = 0;
    for dd i = 0; i < 10 && a < 5; i++; {
         if i % 2 = 0 {
              a = a + 1;
         }
    }
    return a;
}

func test_simple_gate1(){
    dd a = 0;
    // Usamos condições com comparações: 1=1 para true, 1=0 para false.
    if 1=1 & 1=1 | 1=0 {
         a = 100;
    }
    return a;
}

func test_simple_gate2(){
    dd a = 0;
    if 1=0 & 1=1 | 1=0 {
         a = 200;
         return a;
    }
    a = 0;
    return a;
}

func test_complex_gate(){
    dd a = 10;
    dd b = 5;
    dd c = 0;
    if a > 5 & b < 10 | a = 10 {
         c = c + 50;
         return c;
    }
    c = c + 20;
    return c;
}

func test_gate_with_numbers(){
    dd a = 0;
    if 2=2 & 3=3 | 1=0 {
         a = 300;
    }
    return a;
}

func test_gate_with_arithmetic(){
    dd a = 5;
    dd b = 3;
    // Forçamos a condição a ser false usando (1=0).
    if 1=0 & 1=0 | 1=0 {
         a = a + 10;
         return a;
    }
    return a;
}

func test_gate_multiple(){
    dd a = 0;
    if 1=1 | 1=0 & 1=0 | 1=1 & 1=1 | 1=0 {
         a = 500;
         return a;
    }
    a = 250;
    return a;
}

func test_gate_false(){
    dd a = 1000;
    if 1=0 & 1=1 | 1=0 & 2=2 {
         a = a - 1000;
         return a;
    }
    return a;
}

func test_gate_nested_like(){
    dd a = 0;
    dd b = 1;
    dd c = 2;
    if a < b & b < c | a = 0 {
         a = 999;
    }
    return a;
}

func testing_else1(){
    dd testelf = 0;
    if 1 = 0 {
        testelf = testelf + 351;
    }else {
        testelf = testelf + 10;
    }
    return testelf;
}

func testing_else2(){
    dd testelf = 0;
    if 1 = 0 {
        testelf = testelf + 351;
    }elif 1 = 2 {
        testelf = testelf + 349;
    }else {
        testelf = testelf + 10;
    }
    return testelf;
}

func testing_else3(){
    dd testelf = 0;
    if 1 = 0 {
        testelf = testelf + 351;
    }elif 1 = 2 {
        testelf = testelf + 349;
    }elif 1 = 3 {
        testelf = testelf + 348;
    }else {
        testelf = testelf + 10;
    }
    return testelf;
}

func testing_else10(){
    dd testelf = 0;
    if 1 = 0 {
        testelf = testelf + 351;
    }elif 1 = 2 {
        testelf = testelf + 349;
    }elif 1 = 3 {
        testelf = testelf + 348;
    }elif 1 = 4 {
        testelf = testelf + 347;
    }elif 1 = 5 {
        testelf = testelf + 346;
    }elif 1 = 6 {
        testelf = testelf + 345;
    }elif 1 = 7 {
        testelf = testelf + 344;
    }elif 1 = 8 {
        testelf = testelf + 343;
    }elif 1 = 9 {
        testelf = testelf + 342;
    }else {
        testelf = testelf + 10;
    }
    return testelf;
}

func testing_elif1(){
    dd testelf = 0;
    if 1 = 0 {
        testelf = testelf + 351;
    }elif 1 = 1 {
        testelf = testelf + 10;
    }else {
        testelf = testelf + 350;
    }
    return testelf;
}

func testing_elif2(){
    dd testelf = 0;
    if 1 = 0 {
        testelf = testelf + 351;
    }elif 1 = 2 {
        testelf = testelf + 349;
    }elif 1 = 1 {
        testelf = testelf + 10;
    }else {
        testelf = testelf + 348;
    }
    return testelf;
}

func testing_elif3(){
    dd testelf = 0;
    if 1 = 0 {
        testelf = testelf + 351;
    }elif 1 = 2 {
        testelf = testelf + 349;
    }elif 1 = 3 {
        testelf = testelf + 348;
    }elif 1 = 1 {
        testelf = testelf + 10;
    }else {
        testelf = testelf + 347;
    }
    return testelf;
}

func testing_elif10(){
    dd testelf = 0;
    if 1 = 0 {
        testelf = testelf + 351;
    }elif 1 = 2 {
        testelf = testelf + 349;
    }elif 1 = 3 {
        testelf = testelf + 348;
    }elif 1 = 4 {
        testelf = testelf + 347;
    }elif 1 = 5 {
        testelf = testelf + 346;
    }elif 1 = 6 {
        testelf = testelf + 345;
    }elif 1 = 7 {
        testelf = testelf + 344;
    }elif 1 = 8 {
        testelf = testelf + 343;
    }elif 1 = 9 {
        testelf = testelf + 342;
    }elif 1 = 1 {
        testelf = testelf + 10;
    }else {
        testelf = testelf + 341;
    }
    return testelf;
}

func testing_elif11(){
    dd testelf = 0;
    if 1 = 0 {
        testelf = testelf + 351;
    }elif 1 = 2 {
        testelf = testelf + 349;
    }elif 1 = 3 {
        testelf = testelf + 348;
    }elif 1 = 4 {
        testelf = testelf + 347;
    }elif 1 = 5 {
        testelf = testelf + 346;
    }elif 1 = 1 {
        testelf = testelf + 10;
    }elif 1 = 7 {
        testelf = testelf + 344;
    }elif 1 = 8 {
        testelf = testelf + 343;
    }elif 1 = 9 {
        testelf = testelf + 342;
    }elif 1 = 10 {
        testelf = testelf + 341;
    }
    return testelf;
}

func testeNot(){
    dd a = 0;
    if not(a) = xFFFFFFFF {
        a = 10;
    }
    return a;
}

func testeNot2(){
    dd a = x341618A;
    if not(a) = xFCBE9E75 {
        a = 10;
    }
    return a;
}